// DO NOT EDIT. this file is generated by gqlcodegen.
package maker

import (
	"errors"
	"strconv"
)

/*
   Directives:
     @important()
*/
type Maker int

const (

	/*
	   Description:
	     "Scania is awesome"
	*/
	SCANIA Maker = iota
	DAF
	MAN
	RENAULT
	MERCEDES
	IVECO
	VOLVO

	/*
	   Directives:
	     @deprecated(reason: "not an euro truck")
	*/
	ISUZU
)

const _Maker_Name = "SCANIADAFMANRENAULTMERCEDESIVECOVOLVOISUZU"

var _Maker_Index = []int{0, 6, 9, 12, 19, 27, 32, 37, 42}

func (v Maker) String() string {
	if v < 0 || v >= Maker(len(_Maker_Index)-1) {
		return "Maker(" + strconv.FormatInt(int64(v), 10) + ")"
	}
	return _Maker_Name[_Maker_Index[v]:_Maker_Index[v+1]]
}

func _MakerFromString(str string) (Maker, error) {
	for i := 0; i < len(_Maker_Index)-1; i++ {
		if v := Maker(i); str == v.String() {
			return v, nil
		}
	}
	return -1, errors.New(str + " is not found")
}

func (Maker) ImplementsGraphQLType(name string) bool {
	return name == "Maker"
}

func (v *Maker) UnmarshalGraphQL(input interface{}) error {
	switch input := input.(type) {
	case string:
		value, err := _MakerFromString(input)
		if err != nil {
			return err
		}
		*v = value
		return nil
	default:
		return errors.New("wrong type")
	}
}

func (v Maker) MarshalJSON() ([]byte, error) {
	return []byte(`"` + v.String() + `"`), nil
}
